/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.70
 * Generated at: 2016-08-22 09:53:34 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.IOException;
import java.util.*;
import org.apache.solr.client.solrj.SolrQuery;
import org.apache.solr.client.solrj.SolrQuery.ORDER;
import org.apache.solr.client.solrj.SolrServerException;
import org.apache.solr.client.solrj.impl.BinaryRequestWriter;
import org.apache.solr.client.solrj.impl.HttpSolrServer;
import org.apache.solr.client.solrj.impl.XMLResponseParser;
import org.apache.solr.client.solrj.response.QueryResponse;
import org.apache.solr.common.SolrDocument;
import solr_classification.com.SolrConnection;
import org.apache.lucene.queryParser.QueryParser;

public final class test1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

private static String id = null; 
	   private static SolrConnection sConn= new SolrConnection();
	   
	
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("<title>News Classifier</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\t");
      out.write('\n');
      out.write('	');


	sConn.resetQueryParams();
	
	
      out.write("\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("\t");

	
	// Find classification name and set ArtificialTags
	ArrayList<String> classes = sConn.getClasses();
	Enumeration<String> class_names = request.getParameterNames();
	String oneClass = null;
	while (class_names.hasMoreElements()){
		oneClass = class_names.nextElement();
		if(classes.contains(oneClass) && request.getParameter(oneClass).equals("on")){
			System.out.println("Tag as:"+oneClass);
			break;
		};
	}
	out.println(request.getQueryString()+"\n");
	
	// Test Delete
	List<String> ids = new ArrayList<String>();
	ids.add(QueryParser.escape(request.getParameter("id")));
	sConn.deleteContentById(ids);
	
	
	// Update ArtificialTags
	System.out.println("Debug: Going to update id:"+QueryParser.escape(request.getParameter("id")));
	Map<String, Object> update_params = new HashMap<String, Object>();
	Map<String,String> fieldModifier = new HashMap<String,String>();
	fieldModifier.put("set",oneClass); 
	update_params.put("artificialTags",fieldModifier);
	update_params.put("id",QueryParser.escape(request.getParameter("id")));
	
	//sConn.updateContent(update_params);
	
	/*
	// Verify the previous update is successful
	sConn.resetQueryParams();
	sConn.setQueryParams("q", "id:" + QueryParser.escape(request.getParameter("id")));
	sConn.setQueryParams("start", "0");
	sConn.setQueryParams("rows", "1");	
	
	try {
		//solr_response_1 = sConn.getContent();	
	} catch(Exception e){
		System.out.println(e);
	}
	SolrDocument doc_1 = solr_response_1.getResults().get(0);
	id = doc_1.getFieldValue("id").toString();
	System.out.println("Again got : id" + id);
	System.out.println("ArtificialTags: " + doc_1.getFieldValue("artificialTags").toString());
	*/
	
      out.write('\n');
      out.write('\n');
      out.write('	');

	
		QueryResponse solr_response = new QueryResponse();
		
		//sConn.setSolrURL("http://172.24.60.110:8983/solr/test");
		//sConn.setSolrURL("http://localhost:8983/solr/Test1/");
		//sConn.setQueryParams("q","content:急诊 AND content:门诊 AND content:住院 AND content: 质量 AND content:服务 AND content:整形");
		//sConn.resetQueryParams();
		Random rn = new Random();
		int startNum = rn.nextInt(5000);
		
		System.out.println("random number: "+startNum);
		sConn.setQueryParams("start", String.valueOf(startNum));
		sConn.setQueryParams("rows", "1");	
		try {
			solr_response = sConn.getContent();	
		} catch(Exception e){
			//System.out.println(e);
		}
		
		SolrDocument doc = solr_response.getResults().get(0);
		id = doc.getFieldValue("id").toString();
		System.out.println("id : " + id);
		System.out.println("content: " + doc.getFieldValue("content").toString());
		
		out.println("<table border=2>");
		out.println("<tr><th>");
		out.println("id: ");
		out.println("</th><th>");
		out.println("content");
		out.println("</th></tr>");
		out.println("<tr><td>");
		out.println(id);
		out.println("</td><td>");
		out.println(doc.getFieldValue("content").toString());
		out.println("</td></tr>");
		out.println("</table>");
		out.println();
			
		if (doc.getFieldValue("machineTags") != null) {
			out.println("Machine class:" + doc.getFieldValue("machineTags"));
		} else {
			out.println("Machine class: null");
		}
	
      out.write("\n");
      out.write("\n");
      out.write("\t<form action=\"test1.jsp\" name=\"classification\" method=\"GET\" target=\"_blank\" \n");
      out.write("\tonsubmit=\"alert('Are you sure?')\">\n");
      out.write("\t");
 
	out.println("<input type = \"hidden\" name = \"id\" value = \"" + id + "\" />");
	
      out.write("\n");
      out.write("\t<input type=\"checkbox\" name=\"medical\" checked=\"checked\" /> medical \n");
      out.write("\t<input type=\"checkbox\" name=\"non_medical\" /> non_medical \n");
      out.write("\t<input type=\"submit\" value=\"submit\"/>\n");
      out.write("\t</form>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
