/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.70
 * Generated at: 2016-08-19 05:53:06 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.IOException;
import java.util.*;
import org.apache.solr.client.solrj.SolrQuery;
import org.apache.solr.client.solrj.SolrQuery.ORDER;
import org.apache.solr.client.solrj.SolrServerException;
import org.apache.solr.client.solrj.impl.BinaryRequestWriter;
import org.apache.solr.client.solrj.impl.HttpSolrServer;
import org.apache.solr.client.solrj.impl.XMLResponseParser;
import org.apache.solr.client.solrj.response.QueryResponse;
import org.apache.solr.common.SolrDocument;
import solr_classification.com.SolrConnection;

public final class test1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

private static String versionId = null; 

	//private static final String SOLR_URL = "http://58.213.107.34/solr/";
	
/*
	private static QueryResponse getContent(String solrUrl) throws SolrServerException, IOException{
		HttpSolrServer server = new HttpSolrServer(solrUrl);
		
		// optional settings: 
		server.setMaxRetries(1);
		server.setMaxRetries(1); // defaults to 0. > 1 not recommended.
		server.setConnectionTimeout(5000); // 5 seconds to establish TCP
		server.setParser(new XMLResponseParser());
		server.setSoTimeout(1000); // socket read timeout
		server.setDefaultMaxConnectionsPerHost(100);
		server.setMaxTotalConnections(100);
		server.setFollowRedirects(false); // defaults to false
		
		// allowCompression defaults to false.
		// Server side must support gzip or deflate for this to have any effect.
		server.setAllowCompression(true);

		//server.setRequestWriter(new BinaryRequestWriter());
		SolrQuery query = new SolrQuery();
		query.setQuery("content:医");
		query.setFields("id","content");
		//query.setSort("price", ORDER.asc);
		query.setStart(0);
		query.setRows(1);
		//query.set("wt","xml");
		//query.setRequestHandler("/select");
		QueryResponse my_response = server.query( query );
		
		// Get results
		System.out.println("Found:" + my_response.getResults().getNumFound());
		
		return my_response;
	}
	*/
	
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\t");
      out.write("\n");
      out.write("\t\n");
      out.write("\t");

	out.print(request.getQueryString());
	
      out.write("\n");
      out.write("\t\n");
      out.write("\t");
      out.write('\n');
      out.write('	');
      out.write("\n");
      out.write("\t\n");
      out.write("\t\t\n");
      out.write("\t\t\n");
      out.write("\t");

		try {
			HashMap<String, String> query_params = new HashMap<String, String>();
			query_params.put("q",
					"content:急诊 AND content:门诊 AND content:住院 AND content: 质量 AND content:服务 AND content:整形");
			query_params.put("fq", null);
			query_params.put("fl", "id,_version_,content,machineTags,artificialTags");
			query_params.put("start", "0");
			query_params.put("rows", "1");
			query_params.put("sort", null);
			query_params.put("hl", null);
			query_params.put("facet", null);
			
		
			SolrConnection sConn= new SolrConnection(); 
			QueryResponse solr_response = sConn.getContent(query_params);
			int iRow = 1;
			for (SolrDocument doc : solr_response.getResults()) {
				System.out.println("----------" + iRow + "------------");
				System.out.println("version: " + doc.getFieldValue("_version_").toString());
				System.out.println("content: " + doc.getFieldValue("content").toString());
				
				
				versionId = doc.getFieldValue("_version_").toString();
				
				out.println("<table border=2>");
				out.println("<tr><th>");
				out.println("version: " + doc.getFieldValue("_version_").toString());
				out.println("</th><th>");
				out.println("content: " + doc.getFieldValue("content").toString());
				out.println("</th></tr>");
				out.println("</table>");
				out.println();
				
				
				
				if (doc.getFieldValue("machineTags")!=null){
					out.println("Machine class:" + doc.getFieldValue("machineTags"));
				} 
				else{
					out.println("Machine class: null"); 
				}
				
				iRow++;
			}
		} catch(Exception e){
			System.out.println(e);
		}
	
      out.write("\n");
      out.write("\t\n");
      out.write("\t<form action=\"test1.jsp\" method=\"GET\" target=\"_blank\">\n");
      out.write("\t");
 
	out.println("<input type = \"hidden\" name = \"version\" value = \"" + versionId + "\" />");
	
      out.write("\n");
      out.write("\n");
      out.write("\t<input type=\"checkbox\" name=\"medical\" checked=\"checked\" /> medical\n");
      out.write("\t<input type=\"checkbox\" name=\"non_medical\"  /> non_medical\n");
      out.write("\t<input type=\"submit\" value=\"submit\" />\n");
      out.write("\t</form>\n");
      out.write("\t\t\n");
      out.write("\t\t\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("  \n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
