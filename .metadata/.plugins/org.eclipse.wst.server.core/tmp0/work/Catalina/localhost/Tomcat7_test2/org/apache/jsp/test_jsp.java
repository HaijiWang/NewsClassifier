/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.70
 * Generated at: 2016-08-23 08:54:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.IOException;
import java.util.*;
import org.apache.solr.client.solrj.SolrQuery;
import org.apache.solr.client.solrj.SolrQuery.ORDER;
import org.apache.solr.client.solrj.SolrServerException;
import org.apache.solr.client.solrj.impl.BinaryRequestWriter;
import org.apache.solr.client.solrj.impl.HttpSolrServer;
import org.apache.solr.client.solrj.impl.XMLResponseParser;
import org.apache.solr.client.solrj.response.QueryResponse;
import org.apache.solr.common.SolrDocument;
import solr_connection.SolrConnection;

public final class test_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

private static String id = null; 
	   private static SolrConnection sConn= new SolrConnection();
	   private static QueryResponse solr_response = new QueryResponse();
	   private static SolrDocument doc = new SolrDocument();
	
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("<title>News Classifier</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\t");
      out.write('\n');
      out.write('	');

	//sConn.setSolrURL("http://localhost:8983/solr/Test1/");
	//sConn.setSolrURL("http://172.24.60.110:8983/solr/test");
	//sConn.resetQueryParams();
	
      out.write("\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("\t");

	// Print query path page
	out.println("request string: "+request.getQueryString()+"\n");
	
	// Find classification name and set ArtificialTags
	ArrayList<String> classes = sConn.getClasses();
	
	String class_name = request.getParameter("className");
	id = request.getParameter("id");
	
	if (id!=null && classes.contains(class_name)){
	 	System.out.println("Going to Tag as:"+ class_name);
		
		// Update ArtificialTags
		sConn.setFieldById(id,"artificialTags",class_name);
	
		// Verify the previous update is successful
		ArrayList<String> fieldNames = new ArrayList<String>();
		fieldNames.add("content");
		fieldNames.add("artificialTags");
		doc = sConn.getFieldById(id, fieldNames);
		id = doc.getFieldValue("id").toString();
		System.out.println("Again got : id: " + id);
		System.out.println("Again got : content:" + doc.getFieldValue("content").toString());
		System.out.println("Again got : ArtificialTags: " + doc.getFieldValue("artificialTags").toString());
	}
	
      out.write('\n');
      out.write('\n');
      out.write('	');

		
		//sConn.setSolrURL("http://localhost:8983/solr/Test1/");
		Random rn = new Random();
		int startNum = rn.nextInt(10);
		
		System.out.println("random number: "+startNum);
		sConn.resetQueryParams();
		
		HashMap<String,String>  params  = new HashMap<String,String>();
		params.put("start", String.valueOf(startNum));
		params.put("rows","1");
		sConn.setQueryParams(params);
		try {
			solr_response = sConn.getContent();
		} catch(Exception e){
			System.out.println(e);
		}
		
		doc = null;
		doc = solr_response.getResults().get(0);
		id = doc.getFieldValue("id").toString();
		System.out.println("id : " + id);
		System.out.println("content: " + doc.getFieldValue("content").toString());
		
		out.println("<table border=2>");
		out.println("<tr><th>");
		out.println("id: ");
		out.println("</th><th>");
		out.println("content");
		out.println("</th></tr>");
		out.println("<tr><td>");
		out.println(id);
		out.println("</td><td>");
		out.println(doc.getFieldValue("content").toString());
		out.println("</td></tr>");
		out.println("</table>");
		out.println();
			
		if (doc.getFieldValue("machineTags") != null) {
			out.println("<p>Machine class:" + doc.getFieldValue("machineTags")+"</p>");
		} else {
			out.println("<p>Machine class: null</p>");
		}
		if(!doc.containsKey("artificialTags")){
			System.out.println("Caution: artificailTags field not found!");
		}
		if (doc.getFieldValue("artificialTags") != null) {
			out.println("<p>artificial class:" + doc.getFieldValue("artificialTags")+"</p>");
		} else {
			out.println("<p>artificial class: null</p>");
		}
	
      out.write("\n");
      out.write("\n");
      out.write("\t<form action=\"test.jsp\" name=\"classification\" method=\"GET\" target=\"_blank\" >\n");
      out.write("\t");
 
	out.println("<input type = \"hidden\" name = \"id\" value = \"" + id + "\" />");
	
      out.write("\n");
      out.write("\t<input type=\"radio\" value = \"medical\" name=\"className\" /> medical\n");
      out.write("\t<input type=\"radio\" value = \"non_medical\" name=\"className\" /> non_medical\n");
      out.write("\t\n");
      out.write("\t<input type=\"submit\" value=\"submit\"/>\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("\t</form>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
