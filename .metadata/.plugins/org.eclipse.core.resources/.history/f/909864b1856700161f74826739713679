package com.yanjiuyanjiu.text.classification;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.*;

import org.apache.solr.client.solrj.SolrServer.*;
import org.apache.solr.client.solrj.SolrQuery;
import org.apache.solr.client.solrj.SolrServerException;
import org.apache.solr.client.solrj.impl.BinaryRequestWriter;
import org.apache.solr.client.solrj.impl.HttpSolrServer;
import org.apache.solr.client.solrj.impl.XMLResponseParser;
import org.apache.solr.client.solrj.response.QueryResponse;
import org.apache.solr.common.*;

public class SolrConnection {

	private final String SOLR_URL = "http://localhost:8983/solr/Test1";
	//private final String SOLR_URL = "http://172.24.60.110:8983/solr/test";
	// private final String SOLR_URL = "http://58.213.107.34/solr/";
	
	private final HttpSolrServer server = new HttpSolrServer(SOLR_URL);
	
	private final HashMap<String, String> query_params = new HashMap<String, String>(8);
	

	public SolrConnection() {
		query_params.put("q",null);
		query_params.put("fq", null);
		query_params.put("fl", null);
		query_params.put("start", "0");
		query_params.put("rows", "1"); // default to one row
		query_params.put("sort", null);
		query_params.put("hl", null);
		query_params.put("facet", null);
	}
	
	public void setParams(String key,String value){
		if (query_params.containsKey(key)){
			query_params.put(key, value);
		}else{
			System.out.println("query params does not have key:"+key);
		}
		
	}
	
	public void deleteContentById(List<String> ids){
		/**
		 * List<String> ids new ArrayList<String>()
		 * ids.add("the id");
		 */
		System.out.println("Deleting Doc...");
		try {
			server.deleteById(ids);
			server.commit();
		} catch (Exception e) {
			System.out.println(e);
		}
		System.out.println("Finished deleting Doc.");
	}

	/**
	 * Map<String,String> fieldModifier = new HashMap<String,String>();
	   fieldModifier.put("set","George W");
	   doc_in.addField("president", fieldModifier);
	 */
	public void updateContent(HashMap<String,Object> update_params) throws SolrServerException, IOException {
		
		SolrInputDocument doc_in = new SolrInputDocument();
		Iterator itr = update_params.entrySet().iterator();
	    while (itr.hasNext()) {
	        Map.Entry<String,Object> pair = (Map.Entry<String,Object>)itr.next();
	        System.out.println(pair.getKey() + " = " + pair.getValue());
	        doc_in.addField(pair.getKey(), pair.getValue());
	        itr.remove(); // avoids a ConcurrentModificationException
	    }
		System.out.println("Doc_in: " + doc_in.toString());

		System.out.println("updating content...");
		server.add(doc_in);
		server.commit();
		System.out.println("Finished updating solr.");

	}

	public QueryResponse getContent(HashMap<String, String> params) throws SolrServerException, IOException {
		// optional settings:
		server.setMaxRetries(1);
		server.setMaxRetries(1); // defaults to 0. > 1 not recommended.
		server.setConnectionTimeout(5000); // 5 seconds to establish TCP
		server.setParser(new XMLResponseParser());
		server.setSoTimeout(1000); // socket read timeout
		server.setDefaultMaxConnectionsPerHost(100);
		server.setMaxTotalConnections(100);
		server.setFollowRedirects(false); // defaults to false

		SolrQuery query = new SolrQuery();
		Iterator<String> itr = params.keySet().iterator();
		while (itr.hasNext()) {
			String key = itr.next();
			query.set(key, params.get(key));
		}

		QueryResponse my_response = server.query(query);

		System.out.println("Successful! Executed SampleCrawler.getContent(params). Found:"
				+ my_response.getResults().getNumFound() + "rows.");

		return my_response;
	}

	public static void main_tmp(String args[]) {

		QueryResponse solr_response = null;
		try {
			

			SolrConnection tmp_conn = new SolrConnection();
			solr_response = tmp_conn.getContent(query_params);

			SolrDocument doc = solr_response.getResults().get(0);

			System.out.println("Going to update: " + doc.getFieldValue("president").toString());
			System.out.println("Going to update version: " + doc.getFieldValue("_version_").toString());
			
			/*
			if (doc.getFieldValue("machineTags") != null) {
				System.out.println("MachineTags" + doc.getFieldValue("machineTags").toString());
			} else {
				System.out.println("MachineTags: null");
			}
			*/

			
			query_params.put("q", "id:" + doc.getFieldValue("id").toString());
			solr_response = tmp_conn.getContent(query_params);
			
			SolrDocument doc1 = solr_response.getResults().get(0);

			System.out.println("Got: " + doc1.getFieldValue("_version_").toString());
			
			/*
			if (doc.getFieldValue("medical") != null) {
				System.out.println("MachineTags" + doc1.getFieldValue("machineTags").toString());
			} else {
				System.out.println("MachineTags: null");
			}
			*/
			

		} catch (Exception e) {
			System.out.println("Error: in SolrConnection");
			System.out.println(e);
		}
	}

}
