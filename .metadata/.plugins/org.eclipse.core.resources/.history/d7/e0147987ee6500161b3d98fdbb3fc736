package com.yanjiuyanjiu.text.classification;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.*;

import org.apache.solr.client.solrj.SolrServer.*;
import org.apache.solr.client.solrj.SolrQuery;
import org.apache.solr.client.solrj.SolrServerException;
import org.apache.solr.client.solrj.impl.BinaryRequestWriter;
import org.apache.solr.client.solrj.impl.HttpSolrServer;
import org.apache.solr.client.solrj.impl.XMLResponseParser;
import org.apache.solr.client.solrj.response.QueryResponse;
import org.apache.solr.common.*;

public class SolrConnection {

	private final String SOLR_URL = "http://172.24.60.110:8983/solr/test";
	// private final String SOLR_URL = "http://58.213.107.34/solr/";
	// public final HashMap<String,String> query_params = new
	// HashMap<String,String>();

	public SolrConnection() {

	}

	public void updateContent(Collection<SolrInputDocument> doc) throws SolrServerException, IOException {
		System.out.println("updating content...");
		HttpSolrServer server = new HttpSolrServer(SOLR_URL);
		server.add(doc);
		server.optimize();
		server.commit();
		System.out.println("Finished updating solr.");

	}

	public QueryResponse getContent(HashMap<String, String> params) throws SolrServerException, IOException {

		HttpSolrServer server = new HttpSolrServer(SOLR_URL);

		// optional settings:
		server.setMaxRetries(1);
		server.setMaxRetries(1); // defaults to 0. > 1 not recommended.
		server.setConnectionTimeout(5000); // 5 seconds to establish TCP
		server.setParser(new XMLResponseParser());
		server.setSoTimeout(1000); // socket read timeout
		server.setDefaultMaxConnectionsPerHost(100);
		server.setMaxTotalConnections(100);
		server.setFollowRedirects(false); // defaults to false

		SolrQuery query = new SolrQuery();
		Iterator<String> itr = params.keySet().iterator();
		while (itr.hasNext()) {
			String key = itr.next();
			query.set(key, params.get(key));
		}

		// query.setFields("id","content");
		// query.setSort("price", ORDER.asc);
		// query.setStart(start_row);
		// query.setRows(rows);
		// query.setRequestHandler("/select");

		QueryResponse my_response = server.query(query);

		System.out.println("Successful! Executed SampleCrawler.getContent(params). Found:"
				+ my_response.getResults().getNumFound() + "rows.");

		return my_response;
	}

	public static void main(String args[]) {

		QueryResponse solr_response = null;
		try {
			HashMap<String, String> query_params = new HashMap<String, String>();
			query_params.put("q",
					"content:急诊 AND content:门诊 AND content:住院 AND content: 质量 AND content:服务 AND content:整形");
			query_params.put("fq", null);
			query_params.put("fl", null);
			query_params.put("start", "0");
			query_params.put("rows", "1");
			query_params.put("sort", null);
			query_params.put("hl", null);
			query_params.put("facet", null);

			SolrConnection tmp_conn = new SolrConnection();
			solr_response = tmp_conn.getContent(query_params);

			SolrDocument doc = solr_response.getResults().get(0);

			System.out.println("Going to update version: " + doc.getFieldValue("_version_").toString());
			if (doc.getFieldValue("machineTags") != null) {
				System.out.println("MachineTags" + doc.getFieldValue("machineTags").toString());
			} else {
				System.out.println("MachineTags: null");
			}
			Collection<SolrInputDocument> docs_in = new ArrayList<SolrInputDocument>();
			SolrInputDocument doc_in = new SolrInputDocument();
			doc_in.addField("id", doc.getFieldValue("id").toString());
			doc_in.addField("machineTags", "medical");
			System.out.println("Doc_in: " + doc_in.toString());

			docs_in.add(doc_in);
			tmp_conn.updateContent(docs_in);

			query_params.put("q", "_version_:" + doc.getFieldValue("_version_").toString());
			solr_response = tmp_conn.getContent(query_params);
			for (SolrDocument doc1 : solr_response.getResults()) {

				System.out.println("Got: " + doc1.getFieldValue("_version_").toString());
				if (doc.getFieldValue("medical") != null) {
					System.out.println("MachineTags" + doc1.getFieldValue("machineTags").toString());
				} else {
					System.out.println("MachineTags: null");
				}
			}

		} catch (Exception e) {
			System.out.println("Error: in SolrConnection");
			System.out.println(e);
		}
	}

}
